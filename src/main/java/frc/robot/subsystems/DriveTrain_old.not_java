// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.DemandType;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.InvertType;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.can.TalonFXConfiguration;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;

import edu.wpi.first.math.controller.RamseteController;
import edu.wpi.first.math.controller.SimpleMotorFeedforward;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.kinematics.DifferentialDriveKinematics;
import edu.wpi.first.math.kinematics.DifferentialDriveOdometry;
import edu.wpi.first.math.kinematics.DifferentialDriveWheelSpeeds;
import edu.wpi.first.math.trajectory.Trajectory;
import edu.wpi.first.math.util.Units;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.RamseteCommand;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;

public class DriveTrain extends SubsystemBase {
  /** Creates a new DriveTrain. */
  public WPI_TalonFX leftFront = new WPI_TalonFX(Constants.LEFT_FRONT);
  public WPI_TalonFX rightFront = new WPI_TalonFX(Constants.RIGHT_FRONT);
  public WPI_TalonFX leftBack = new WPI_TalonFX(Constants.LEFT_BACK);
  public WPI_TalonFX rightBack = new WPI_TalonFX(Constants.RIGHT_BACK);


  
  //MotorControllerGroup leftMotors = new MotorControllerGroup(leftFront, leftBack);
  //MotorControllerGroup rightMotors = new MotorControllerGroup(rightFront, rightBack);

  private final DifferentialDrive m_drive;
  //the gyro sensor
  private final ADXRS450_Gyro m_gyro;

  private final DifferentialDriveOdometry m_odometry;
  private Pose2d savedPose;

  public static final double TRACK_WIDTH_METERS = 0.555625;
  public static final DifferentialDriveKinematics m_driveKinematics = new DifferentialDriveKinematics(TRACK_WIDTH_METERS);

  //Voltage needed to ovecome the motor's static friction.  kS
  public static final double kS = 0.829;

  //Voltage needed to hold (or "cruise") at a given constraint velocity.  kV
  public static final double kV = 3.04;

  //Voltage needed to induce a given acceleration in the motor shaft.  kA
  public static final double kA = 0.676;

  public static boolean kGyroReversed = false;
  public static final SimpleMotorFeedforward m_feedForward = new SimpleMotorFeedforward(kS, kV, kA);


  public DriveTrain() {

    m_drive = new DifferentialDrive(leftFront, rightFront);

    
    leftFront.setSafetyEnabled(false);
    leftBack.setSafetyEnabled(false);
    rightFront.setSafetyEnabled(false);
    rightBack.setSafetyEnabled(false);
  
    //Ramp time to spin up the motors
    // leftFront.configOpenloopRamp(0.05);
    // leftBack.configOpenloopRamp(0.05);
    // rightFront.configOpenloopRamp(0.05);
    // rightBack.configOpenloopRamp(0.05);
  
    //Sets the neutral mode and implements a coasting system
    rightFront.setNeutralMode(NeutralMode.Coast);
    leftFront.setNeutralMode(NeutralMode.Coast);
    rightBack.setNeutralMode(NeutralMode.Coast);
    leftBack.setNeutralMode(NeutralMode.Coast);
  
    //Sets two motors to be inverted to compensate for mirroring
    //on the mounting configuration
    leftFront.setInverted(false);
    leftBack.follow(leftFront);
    rightFront.setInverted(true);
    rightBack.follow(rightFront);
    
    leftFront.configFactoryDefault();  //Do we need this?
    rightFront.configFactoryDefault(); //Do we need this?

    rightFront.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, 10);  //?? parameters
    leftFront.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, 10);

    m_gyro = new ADXRS450_Gyro(SPI.Port.kMXP);
    m_gyro.reset();

    zeroDriveTrainEncoders();

    m_odometry = new DifferentialDriveOdometry(Rotation2d.fromDegrees(getHeading()));

    TalonFXConfiguration m_talonConfig = new TalonFXConfiguration();
    m_talonConfig.primaryPID.selectedFeedbackSensor = FeedbackDevice.CTRE_MagEncoder_Relative;
    m_talonConfig.neutralDeadband = 0.001;
    m_talonConfig.slot0.kF = 1023.0 / 6800.0;
    m_talonConfig.slot0.kP = 1.0;
    m_talonConfig.slot0.kI = 0.0;
    m_talonConfig.slot0.kD = 0.0;
    m_talonConfig.slot0.integralZone = 400;
    m_talonConfig.slot0.closedLoopPeakOutput = 1.0;
    m_talonConfig.openloopRamp = 0.25;
  }

    public void resetOdometry() {
      zeroDriveTrainEncoders();
      m_gyro.reset();
      savedPose = new Pose2d(0, 0, Rotation2d.fromDegrees(getHeading()));
      m_odometry.resetPosition(savedPose, Rotation2d.fromDegrees(getHeading()));
    }

  

  @Override
  public void periodic() {
    // This method will be called once per scheduler run

    // m_odometry.update(Rotation2d.fromDegrees(getHeading()), stepsToMeters(getLeftEncoderPosition()), stepsToMeters(getRightEncoderPosition()));
    // SmartDashboard.putString("Pose", m_odometry.getPoseMeters().toString());
  }

  public void arcadeDrive(Joystick driverJoystick, double speed)
	{
		//drive.arcadeDrive(driverJoystick.getRawAxis(Constants.GP_LEFT_Y_AXIS) * speed, driverJoystick.getRawAxis(Constants.GP_LEFT_X_AXIS) * speed);
	  m_drive.arcadeDrive(-driverJoystick.getY(), driverJoystick.getX());
  }
	
	public void tankDrive(double leftSpeed, double rightSpeed) {
	
		m_drive.tankDrive(leftSpeed, rightSpeed);
	}

  public void curvatureDrive(double speed, double rotation){
    m_drive.curvatureDrive(speed, rotation, true);
  }

  public double getHeading(){
    return Math.IEEEremainder(m_gyro.getAngle(), 360.0d) * -1.0d;
  }

  public double getTurnRate() {
    return m_gyro.getRate() * (kGyroReversed ? -1.0 : 1.0);
  }

  public void zeroDriveTrainEncoders() {
    leftFront.setSelectedSensorPosition(0);
    rightFront.setSelectedSensorPosition(0);
  }

  public double getLeftEncoderPosition() {
    return leftFront.getSelectedSensorPosition(0);
  }

  public double getRightEncoderPosition() {
    return rightFront.getSelectedSensorPosition(0);
  }

  public Pose2d getCurrentPose() {
    return m_odometry.getPoseMeters();
  }

  public void saveCurrentPos() {
    savedPose = getCurrentPose();
  }
	
	public void stop()
	{
		m_drive.stopMotor();
	}

  public DifferentialDriveWheelSpeeds getWheelSpeeds(){
    return new DifferentialDriveWheelSpeeds(stepsPerDecisecToMetersPerSec(leftFront.getSelectedSensorVelocity()), stepsPerDecisecToMetersPerSec(rightFront.getSelectedSensorVelocity()));
  }

  public void tankDriveVelocity(double leftVelocity, double rightVelocity) {
    var leftAccel = (leftVelocity - stepsPerDecisecToMetersPerSec(leftFront.getSelectedSensorVelocity())) /20;
    var rightAccel = (rightVelocity = stepsPerDecisecToMetersPerSec(rightFront.getSelectedSensorVelocity())) /20;
    var leftFeedForwardVolts = m_feedForward.calculate(leftVelocity, leftAccel);
    var rightFeedForwardVolts = m_feedForward.calculate(rightVelocity, rightAccel);
    leftFront.set(ControlMode.Velocity, metersPerSecToStepsPerDecisec(leftVelocity),DemandType.ArbitraryFeedForward, leftFeedForwardVolts /12);
    rightFront.set(ControlMode.Velocity, metersPerSecToStepsPerDecisec(rightVelocity),DemandType.ArbitraryFeedForward, rightFeedForwardVolts /12);

  }
public SequentialCommandGroup createCommandForTrajectory(Trajectory trajectory) {
  return new RamseteCommand(trajectory, this::getCurrentPose, new RamseteController(2, 0.7), 
                            m_driveKinematics, this::tankDriveVelocity,
                            this)
                          .andThen(this::stop, this);
}

public static double insToRevs(double inches){
  return inches / 4.5 * Math.PI;
}

public static double insPerSecToStepsPerDecisec(double inchesPerSec) {
  return insToSteps(inchesPerSec) * 0.1;
}

public static double insToSteps(double inches) {
  return (insToRevs(inches) * 4096);
}

public static double stepsPerDecisecToMetersPerSec(double stepsPerDecisec){
  return stepsToMeters(stepsPerDecisec * 10);
}

public static double stepsToMeters(double steps) {
  return (Units.inchesToMeters(4.5) * Math.PI / 4096) * steps;
}

public static double metersToSteps(double meters) {
  return (meters / 0.48) * 4096;
}

public static double metersPerSecToStepsPerDecisec(double metersPerSec) {
  return metersToSteps(metersPerSec) * 0.1d;
}
}
  